// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "Test/domain"

	mock "github.com/stretchr/testify/mock"
)

// VoucherData is an autogenerated mock type for the VoucherData type
type VoucherData struct {
	mock.Mock
}

// CreateVoucherData provides a mock function with given fields: newVoucher
func (_m *VoucherData) CreateVoucherData(newVoucher domain.Voucher) domain.Voucher {
	ret := _m.Called(newVoucher)

	var r0 domain.Voucher
	if rf, ok := ret.Get(0).(func(domain.Voucher) domain.Voucher); ok {
		r0 = rf(newVoucher)
	} else {
		r0 = ret.Get(0).(domain.Voucher)
	}

	return r0
}

// GetAllVoucherData provides a mock function with given fields: brandID
func (_m *VoucherData) GetAllVoucherData(brandID int) []domain.Voucher_Brand {
	ret := _m.Called(brandID)

	var r0 []domain.Voucher_Brand
	if rf, ok := ret.Get(0).(func(int) []domain.Voucher_Brand); ok {
		r0 = rf(brandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Voucher_Brand)
		}
	}

	return r0
}

// GetByIDVoucherData provides a mock function with given fields: id
func (_m *VoucherData) GetByIDVoucherData(id int) domain.Voucher_Brand {
	ret := _m.Called(id)

	var r0 domain.Voucher_Brand
	if rf, ok := ret.Get(0).(func(int) domain.Voucher_Brand); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Voucher_Brand)
	}

	return r0
}

type mockConstructorTestingTNewVoucherData interface {
	mock.TestingT
	Cleanup(func())
}

// NewVoucherData creates a new instance of VoucherData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVoucherData(t mockConstructorTestingTNewVoucherData) *VoucherData {
	mock := &VoucherData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
