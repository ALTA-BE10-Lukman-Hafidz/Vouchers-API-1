// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "Test/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// Login provides a mock function with given fields: userData
func (_m *UserUseCase) Login(userData domain.User) (map[string]interface{}, int) {
	ret := _m.Called(userData)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(domain.User) map[string]interface{}); ok {
		r0 = rf(userData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(domain.User) int); ok {
		r1 = rf(userData)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: newUser, cost
func (_m *UserUseCase) RegisterUser(newUser domain.User, cost int) int {
	ret := _m.Called(newUser, cost)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.User, int) int); ok {
		r0 = rf(newUser, cost)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type mockConstructorTestingTNewUserUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUseCase(t mockConstructorTestingTNewUserUseCase) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
