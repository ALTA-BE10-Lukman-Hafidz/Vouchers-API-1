// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "Test/domain"

	mock "github.com/stretchr/testify/mock"
)

// TransactionUseCase is an autogenerated mock type for the TransactionUseCase type
type TransactionUseCase struct {
	mock.Mock
}

// CreateRedeem provides a mock function with given fields: newTrans, id
func (_m *TransactionUseCase) CreateRedeem(newTrans domain.Transaction, id int) int {
	ret := _m.Called(newTrans, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Transaction, int) int); ok {
		r0 = rf(newTrans, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetRedeem provides a mock function with given fields: id
func (_m *TransactionUseCase) GetRedeem(id int) (map[string]interface{}, int) {
	ret := _m.Called(id)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(int) map[string]interface{}); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionUseCase creates a new instance of TransactionUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionUseCase(t mockConstructorTestingTNewTransactionUseCase) *TransactionUseCase {
	mock := &TransactionUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
